% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/trac.R
\name{trac}
\alias{trac}
\title{Perform tree-based aggregation}
\usage{
trac(Z, y, A, lamlist = NULL, eps = 0.001, nlam = 20, flmin = 1e-04, w = NULL)
}
\arguments{
\item{Z}{n by p matrix containing log(X)}

\item{y}{n vector (response)}

\item{A}{p by t_size binary matrix giving tree structure (t_size is the total
number of nodes)}

\item{lamlist}{(optional) vector of tuning parameters.  Or a list of length num_w
of such vectors.}

\item{nlam}{number of tuning parameters (ignored if lamlist non-NULL)}

\item{flmin}{ratio of smallest to largest tuning parameter (ignored if lamlist
non-NULL)}

\item{w}{vector of positive weights of length t_size (default: all equal to 1). Or
a list of num_w such vectors.}
}
\value{
a list of length num_w, where each list element corresponds to the solution
for that choice of w.  Note that the lamlist depends on the choice of w.
}
\description{
Solves the weighted aggregation problem using the CLASSO module
in Python.  The optimization problem is
}
\details{
minimize_{beta, beta0, gamma} 1/(2n) || y - beta0 1_n - Z_clr beta ||^2
+ lam || W * gamma ||_1
subject to beta = A gamma, 1_p^T beta = 0
where W = diag(w) with w_u > 0 for all u
}
